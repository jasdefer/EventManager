<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateDatabase" xml:space="preserve">
    <value>CREATE DATABASE [{0}]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'{0}', FILENAME = N'{1}{0}.mdf' , SIZE = 3072KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'{0}_log', FILENAME = N'{1}{0}_log.ldf' , SIZE = 1024KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
ALTER DATABASE [{0}] SET COMPATIBILITY_LEVEL = 120
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [{0}].[dbo].[sp_fulltext_database] @action = 'enable'
end
ALTER DATABASE [{0}] SET ANSI_NULL_DEFAULT OFF 
ALTER DATABASE [{0}] SET ANSI_NULLS OFF 
ALTER DATABASE [{0}] SET ANSI_PADDING OFF 
ALTER DATABASE [{0}] SET ANSI_WARNINGS OFF 
ALTER DATABASE [{0}] SET ARITHABORT OFF 
ALTER DATABASE [{0}] SET AUTO_CLOSE OFF 
ALTER DATABASE [{0}] SET AUTO_SHRINK OFF 
ALTER DATABASE [{0}] SET AUTO_UPDATE_STATISTICS ON 
ALTER DATABASE [{0}] SET CURSOR_CLOSE_ON_COMMIT OFF 
ALTER DATABASE [{0}] SET CURSOR_DEFAULT  GLOBAL 
ALTER DATABASE [{0}] SET CONCAT_NULL_YIELDS_NULL OFF 
ALTER DATABASE [{0}] SET NUMERIC_ROUNDABORT OFF 
ALTER DATABASE [{0}] SET QUOTED_IDENTIFIER OFF 
ALTER DATABASE [{0}] SET RECURSIVE_TRIGGERS OFF 
ALTER DATABASE [{0}] SET  DISABLE_BROKER 
ALTER DATABASE [{0}] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
ALTER DATABASE [{0}] SET DATE_CORRELATION_OPTIMIZATION OFF 
ALTER DATABASE [{0}] SET TRUSTWORTHY OFF 
ALTER DATABASE [{0}] SET ALLOW_SNAPSHOT_ISOLATION OFF 
ALTER DATABASE [{0}] SET PARAMETERIZATION SIMPLE 
ALTER DATABASE [{0}] SET READ_COMMITTED_SNAPSHOT OFF 
ALTER DATABASE [{0}] SET HONOR_BROKER_PRIORITY OFF 
ALTER DATABASE [{0}] SET RECOVERY SIMPLE 
ALTER DATABASE [{0}] SET  MULTI_USER 
ALTER DATABASE [{0}] SET PAGE_VERIFY CHECKSUM  
ALTER DATABASE [{0}] SET DB_CHAINING OFF 
ALTER DATABASE [{0}] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
ALTER DATABASE [{0}] SET TARGET_RECOVERY_TIME = 0 SECONDS 
ALTER DATABASE [{0}] SET DELAYED_DURABILITY = DISABLED 
ALTER DATABASE [{0}] SET  READ_WRITE</value>
  </data>
  <data name="CreateTables" xml:space="preserve">
    <value>USE [{0}]
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[Regions](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Value] [int] NULL,
	[Name] [varchar](11) NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[Description] [varchar](1024) NULL,
	[Polygon] [varchar](1024) NOT NULL,
 CONSTRAINT [PK_Regions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[RegionVisitors](
	[VisitorId] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
 CONSTRAINT [PK_RegionVisitors] PRIMARY KEY CLUSTERED 
(
	[VisitorId] ASC,
	[RegionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[Visitors](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Username] [varchar](64) NOT NULL,
	[Email] [varchar](512) NOT NULL,
	[PasswordHash] [varchar](2048) NOT NULL,
	[Bio] [varchar](1024) NULL,
 CONSTRAINT [PK_Visitors] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[RegionVisitors]  WITH CHECK ADD  CONSTRAINT [FK_RegionId] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Regions] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
ALTER TABLE [dbo].[RegionVisitors] CHECK CONSTRAINT [FK_RegionId]
ALTER TABLE [dbo].[RegionVisitors]  WITH CHECK ADD  CONSTRAINT [FK_VisitorId] FOREIGN KEY([VisitorId])
REFERENCES [dbo].[Visitors] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
ALTER TABLE [dbo].[RegionVisitors] CHECK CONSTRAINT [FK_VisitorId]</value>
    <comment>Creates the tables for the database</comment>
  </data>
  <data name="DoesDbExists" xml:space="preserve">
    <value>If(db_id(N'{0}') IS NULL) select 0 else select 1;</value>
  </data>
  <data name="SeedTestDatabase" xml:space="preserve">
    <value>USE [{0}]
SET IDENTITY_INSERT [dbo].[Visitors] ON 

INSERT [dbo].[Visitors] ([Id], [Username], [Email], [PasswordHash], [Bio]) VALUES (2, N'jochen', N'jochen@email.com', N'SECURE HASH', N'I am an awesome guy.')
INSERT [dbo].[Visitors] ([Id], [Username], [Email], [PasswordHash], [Bio]) VALUES (3, N'hans', N'hans@email.com', N'SECURE HASH', N'I am an even better guy.')
INSERT [dbo].[Visitors] ([Id], [Username], [Email], [PasswordHash], [Bio]) VALUES (4, N'peter', N'peter@email.com', N'SECURE HASH', NULL)
SET IDENTITY_INSERT [dbo].[Visitors] OFF
SET IDENTITY_INSERT [dbo].[Regions] ON 

INSERT [dbo].[Regions] ([Id], [Value], [Name], [TimeStamp], [Description], [Polygon]) VALUES (2, 1, N'Region One ', CAST(N'2010-01-20T10:23:55.000' AS DateTime), N'A brief description of this region.', N'polygon data')
INSERT [dbo].[Regions] ([Id], [Value], [Name], [TimeStamp], [Description], [Polygon]) VALUES (3, 10, N'Region Two ', CAST(N'2010-01-01T00:00:00.000' AS DateTime), NULL, N'polygon data')
INSERT [dbo].[Regions] ([Id], [Value], [Name], [TimeStamp], [Description], [Polygon]) VALUES (7, 5, N'RegionThree', CAST(N'2017-12-12T10:10:00.000' AS DateTime), N'This is another description for this awesome region.', N'polygon data')
SET IDENTITY_INSERT [dbo].[Regions] OFF
INSERT [dbo].[RegionVisitors] ([VisitorId], [RegionId]) VALUES (2, 2)
INSERT [dbo].[RegionVisitors] ([VisitorId], [RegionId]) VALUES (2, 3)
INSERT [dbo].[RegionVisitors] ([VisitorId], [RegionId]) VALUES (4, 3)</value>
  </data>
</root>