//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer.Properties {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataLayer.Properties.Resources", typeof(Resources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE DATABASE [{0}]
        /// CONTAINMENT = NONE
        /// ON  PRIMARY 
        ///( NAME = N&apos;{0}&apos;, FILENAME = N&apos;{1}{0}.mdf&apos; , SIZE = 3072KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
        /// LOG ON 
        ///( NAME = N&apos;{0}_log&apos;, FILENAME = N&apos;{1}{0}_log.ldf&apos; , SIZE = 1024KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
        ///ALTER DATABASE [{0}] SET COMPATIBILITY_LEVEL = 120
        ///IF (1 = FULLTEXTSERVICEPROPERTY(&apos;IsFullTextInstalled&apos;))
        ///begin
        ///EXEC [{0}].[dbo].[sp_fulltext_database] @action = &apos;enable&apos;
        ///end
        ///ALTER DATABASE [{0}] SET ANSI_NULL_DEFAULT OFF 
        ///ALT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateDatabase {
            get {
                return ResourceManager.GetString("CreateDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [{0}]
        ///SET ANSI_NULLS ON
        ///SET QUOTED_IDENTIFIER ON
        ///CREATE TABLE [dbo].[Regions](
        ///	[Id] [int] IDENTITY(1,1) NOT NULL,
        ///	[Value] [int] NULL,
        ///	[Name] [varchar](11) NOT NULL,
        ///	[TimeStamp] [datetime] NOT NULL,
        ///	[Description] [varchar](1024) NULL,
        ///	[Polygon] [varchar](1024) NOT NULL,
        /// CONSTRAINT [PK_Regions] PRIMARY KEY CLUSTERED 
        ///(
        ///	[Id] ASC
        ///)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
        ///) ON [PRIMARY]
        ///
        ///SET AN [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateTables {
            get {
                return ResourceManager.GetString("CreateTables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If(db_id(N&apos;{0}&apos;) IS NULL) select 0 else select 1;.
        /// </summary>
        internal static string DoesDbExists {
            get {
                return ResourceManager.GetString("DoesDbExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [{0}]
        ///SET IDENTITY_INSERT [dbo].[Visitors] ON 
        ///
        ///INSERT [dbo].[Visitors] ([Id], [Username], [Email], [PasswordHash], [Bio]) VALUES (2, N&apos;jochen&apos;, N&apos;jochen@email.com&apos;, N&apos;SECURE HASH&apos;, N&apos;I am an awesome guy.&apos;)
        ///INSERT [dbo].[Visitors] ([Id], [Username], [Email], [PasswordHash], [Bio]) VALUES (3, N&apos;hans&apos;, N&apos;hans@email.com&apos;, N&apos;SECURE HASH&apos;, N&apos;I am an even better guy.&apos;)
        ///INSERT [dbo].[Visitors] ([Id], [Username], [Email], [PasswordHash], [Bio]) VALUES (4, N&apos;peter&apos;, N&apos;peter@email.com&apos;, N&apos;SECURE HASH&apos;, NULL) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SeedTestDatabase {
            get {
                return ResourceManager.GetString("SeedTestDatabase", resourceCulture);
            }
        }
    }
}
